package edu.sinchuk.kurs.views;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.annotations.DesignRoot;
import com.vaadin.data.Property;
import com.vaadin.data.validator.RegexpValidator;
import com.vaadin.data.validator.StringLengthValidator;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener;
import com.vaadin.ui.*;
import com.vaadin.ui.declarative.Design;
import edu.sinchuk.kurs.models.services.DataBaseConnection;

import java.sql.SQLException;
import java.util.logging.Logger;

/**
 * !! DO NOT EDIT THIS FILE !!
 * <p>
 * This class is generated by Vaadin Designer and will be overwritten.
 * <p>
 * Please make a subclass with logic and additional interfaces as needed,
 * e.g class LoginView extends LoginDesign implements View { }
 */
@DesignRoot
@AutoGenerated
@SuppressWarnings("serial")
public class LoginView extends VerticalLayout implements View {

    final static public String NAME = "";

    private static final Logger logger = Logger.getLogger("LoginView");

    protected Label title;
    protected TextField login;
    protected PasswordField pass;
    protected Button signIn;
    protected Button signUp;

    public LoginView() {
        Design.read(this);

        DataBaseConnection connection = new DataBaseConnection();
        try {
            connection.connect();
            logger.warning("Подключение установлено!!!");
        } catch (ClassNotFoundException e) {
            logger.warning("Не найден драйвер!!!");
        } catch (SQLException e) {
            logger.warning("SQL ошибка!!!");
        }

        login.addValidator(new RegexpValidator("^[a-zA-Z][a-zA-Z0-9-_\\.]{1,20}$","Login type error..."));
        pass.addValidator(new StringLengthValidator("Pass type error...",8,20,false));

        signIn.addClickListener(new Button.ClickListener() {
            @Override
            public void buttonClick(Button.ClickEvent clickEvent) {
                if ((login.getValue().equals("user")) && (pass.getValue().equals("qwerty123"))) {
                    UI.getCurrent().getNavigator().addView(UserPanelView.NAME,new UserPanelView());
                    UI.getCurrent().getNavigator().navigateTo(UserPanelView.NAME);
                } else if ((login.getValue().equals("developer")) && (pass.getValue().equals("developer"))) {
                    UI.getCurrent().getNavigator().addView(DeveloperPanelView.NAME,new DeveloperPanelView());
                    UI.getCurrent().getNavigator().navigateTo(DeveloperPanelView.NAME);
                }
            }
        });

        signUp.addClickListener(new Button.ClickListener() {
            @Override
            public void buttonClick(Button.ClickEvent clickEvent) {
                UI.getCurrent().getNavigator().addView(RegisterView.NAME,new RegisterView());
                UI.getCurrent().getNavigator().navigateTo(RegisterView.NAME);
            }
        });
    }

    @Override
    public void enter(ViewChangeListener.ViewChangeEvent viewChangeEvent) {
    }
}
